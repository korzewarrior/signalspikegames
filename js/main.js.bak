/**
 * Signal Spike Games - V2 JavaScript
 * Modern, performant, and accessible interactions
 */

class SignalSpikeWebsite {
    constructor() {
        this.init();
    }

    init() {
        this.bindEvents();
        this.initLoading();
        this.initNavigation();
        this.initScrollAnimations();
        this.initFormHandlers();
        this.initParallax();
        this.updateCopyright();
        
        // Initialize after DOM is ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                this.onDOMReady();
            });
        } else {
            this.onDOMReady();
        }
    }

    bindEvents() {
        // Throttled scroll event
        let scrollTimer;
        window.addEventListener('scroll', () => {
            if (scrollTimer) {
                window.cancelAnimationFrame(scrollTimer);
            }
            scrollTimer = window.requestAnimationFrame(() => {
                this.handleScroll();
            });
        }, { passive: true });

        // Optimized resize event
        let resizeTimer;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimer);
            resizeTimer = setTimeout(() => {
                this.handleResize();
            }, 150);
        }, { passive: true });

        // Keyboard navigation
        document.addEventListener('keydown', (e) => {
            this.handleKeyboard(e);
        });
    }

    onDOMReady() {
        // Set up intersection observer for animations
        this.setupIntersectionObserver();
        
        // Initialize any components that need the DOM
        this.initTechAnimations();
        this.preloadCriticalImages();
        
        // Initial scroll position handling
        this.handleScroll();
    }

    // Loading Screen
    initLoading() {
        const loadingScreen = document.getElementById('loadingScreen');
        if (!loadingScreen) return;

        // Simulate loading progress
        const progressBar = loadingScreen.querySelector('.loading-progress');
        if (progressBar) {
            progressBar.style.width = '0%';
            
            // Animate progress
            setTimeout(() => {
                progressBar.style.width = '30%';
            }, 200);
            
            setTimeout(() => {
                progressBar.style.width = '70%';
            }, 800);
            
            setTimeout(() => {
                progressBar.style.width = '100%';
            }, 1200);
        }

        // Hide loading screen
        window.addEventListener('load', () => {
            setTimeout(() => {
                loadingScreen.classList.add('hidden');
                document.body.style.overflow = '';
                
                // Remove loading screen from DOM after animation
                setTimeout(() => {
                    if (loadingScreen.parentNode) {
                        loadingScreen.parentNode.removeChild(loadingScreen);
                    }
                }, 500);
            }, 1500);
        });

        // Prevent scrolling during loading
        document.body.style.overflow = 'hidden';
    }

    // Navigation
    initNavigation() {
        const navToggle = document.getElementById('navToggle');
        const navMenu = document.getElementById('navMenu');
        const navLinks = document.querySelectorAll('.nav-link');

        // Mobile menu toggle
        if (navToggle && navMenu) {
            navToggle.addEventListener('click', () => {
                navToggle.classList.toggle('active');
                navMenu.classList.toggle('active');
                
                // Prevent body scroll when menu is open
                if (navMenu.classList.contains('active')) {
                    document.body.style.overflow = 'hidden';
                } else {
                    document.body.style.overflow = '';
                }
            });
        }

        // Smooth scroll for navigation links
        navLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const targetId = link.getAttribute('href');
                
                if (targetId === '#home') {
                    window.scrollTo({
                        top: 0,
                        behavior: 'smooth'
                    });
                } else {
                    const targetElement = document.querySelector(targetId);
                    if (targetElement) {
                        const headerOffset = 80;
                        const elementPosition = targetElement.getBoundingClientRect().top;
                        const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

                        window.scrollTo({
                            top: offsetPosition,
                            behavior: 'smooth'
                        });
                    }
                }

                // Close mobile menu if open
                if (navMenu && navMenu.classList.contains('active')) {
                    navToggle.classList.remove('active');
                    navMenu.classList.remove('active');
                    document.body.style.overflow = '';
                }

                // Update active state
                this.updateActiveNavLink(link);
            });
        });

        // Close mobile menu when clicking outside
        document.addEventListener('click', (e) => {
            if (navMenu && navMenu.classList.contains('active') && 
                !navMenu.contains(e.target) && !navToggle.contains(e.target)) {
                navToggle.classList.remove('active');
                navMenu.classList.remove('active');
                document.body.style.overflow = '';
            }
        });
    }

    updateActiveNavLink(activeLink) {
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });
        activeLink.classList.add('active');
    }

    handleScroll() {
        const scrollY = window.pageYOffset;
        const nav = document.getElementById('mainNav');
        
        // Update navigation background
        if (nav) {
            if (scrollY > 50) {
                nav.classList.add('scrolled');
            } else {
                nav.classList.remove('scrolled');
            }
        }

        // Update active navigation based on scroll position
        this.updateActiveNavOnScroll();
        
        // Parallax effects
        this.updateParallax(scrollY);
    }

    updateActiveNavOnScroll() {
        const scrollPosition = window.scrollY + 100;
        const sections = document.querySelectorAll('section[id]');
        const navLinks = document.querySelectorAll('.nav-link');
        
        // Special case for top of page
        if (window.scrollY < 100) {
            navLinks.forEach(link => link.classList.remove('active'));
            const homeLink = document.querySelector('.nav-link[href="#home"]');
            if (homeLink) homeLink.classList.add('active');
            return;
        }

        let currentSection = null;
        sections.forEach(section => {
            const sectionTop = section.offsetTop;
            const sectionHeight = section.offsetHeight;
            
            if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
                currentSection = section.getAttribute('id');
            }
        });

        // Update active nav link
        navLinks.forEach(link => link.classList.remove('active'));
        if (currentSection) {
            const activeLink = document.querySelector(`.nav-link[href="#${currentSection}"]`);
            if (activeLink) activeLink.classList.add('active');
        }
    }

    // Parallax Effects
    initParallax() {
        this.parallaxElements = [
            {
                element: document.querySelector('.hero-background'),
                speed: 0.3
            }
        ].filter(item => item.element);
    }

    updateParallax(scrollY) {
        this.parallaxElements.forEach(item => {
            const yPos = -(scrollY * item.speed);
            item.element.style.transform = `translate3d(0, ${yPos}px, 0)`;
        });
    }

    // Scroll Animations
    initScrollAnimations() {
        // Add animation classes to elements
        const animatedElements = document.querySelectorAll([
            '.section-header',
            '.feature',
            '.project-card',
            '.text-block',
            '.careers-visual',
            '.contact-method'
        ].join(', '));

        animatedElements.forEach((element, index) => {
            element.classList.add('animate-on-scroll');
            if (index % 3 === 1) element.classList.add('delay-1');
            if (index % 3 === 2) element.classList.add('delay-2');
        });
    }

    setupIntersectionObserver() {
        // Intersection Observer for scroll animations
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        this.animationObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('in-view');
                }
            });
        }, observerOptions);

        // Observe animated elements
        document.querySelectorAll('.animate-on-scroll').forEach(element => {
            this.animationObserver.observe(element);
        });

        // Lazy load images
        this.setupLazyLoading();
    }

    setupLazyLoading() {
        const imageObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    if (img.dataset.src) {
                        img.src = img.dataset.src;
                        img.classList.remove('lazy');
                        imageObserver.unobserve(img);
                    }
                }
            });
        });

        document.querySelectorAll('img[data-src]').forEach(img => {
            imageObserver.observe(img);
        });
    }

    // Form Handlers
    initFormHandlers() {
        const newsletterForm = document.getElementById('newsletterForm');
        
        if (newsletterForm) {
            newsletterForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleNewsletterSubmission(newsletterForm);
            });
        }

        // Form validation
        const emailInputs = document.querySelectorAll('input[type="email"]');
        emailInputs.forEach(input => {
            input.addEventListener('blur', () => {
                this.validateEmail(input);
            });
        });
    }

    handleNewsletterSubmission(form) {
        const formData = new FormData(form);
        const email = formData.get('email') || form.querySelector('input[type="email"]').value;
        
        if (!this.isValidEmail(email)) {
            this.showFormError(form, 'Please enter a valid email address.');
            return;
        }

        // Show loading state
        const submitBtn = form.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> <span>Subscribing...</span>';
        submitBtn.disabled = true;

        // Simulate API call (replace with actual implementation)
        setTimeout(() => {
            this.showFormSuccess(form);
            form.reset();
            
            // Reset button
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        }, 1500);
    }

    showFormSuccess(form) {
        const successElement = form.querySelector('.form-success');
        if (successElement) {
            successElement.classList.add('show');
            setTimeout(() => {
                successElement.classList.remove('show');
            }, 5000);
        }
    }

    showFormError(form, message) {
        // You can implement error display here
        console.error('Form error:', message);
    }

    validateEmail(input) {
        const isValid = this.isValidEmail(input.value);
        if (input.value && !isValid) {
            input.style.borderColor = 'var(--primary-red)';
        } else {
            input.style.borderColor = '';
        }
    }

    isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    // Tech Animations
    initTechAnimations() {
        const techTags = document.querySelectorAll('.tech-tag, .feature-tag');
        
        techTags.forEach((tag, index) => {
            tag.style.animationDelay = `${index * 0.1}s`;
            tag.addEventListener('mouseenter', () => {
                tag.style.transform = 'scale(1.05) translateY(-2px)';
            });
            tag.addEventListener('mouseleave', () => {
                tag.style.transform = '';
            });
        });
    }

    // Preload critical images
    preloadCriticalImages() {
        const criticalImages = [
            'img/starboy.png'
        ];

        criticalImages.forEach(src => {
            const img = new Image();
            img.src = src;
        });
    }

    // Keyboard navigation
    handleKeyboard(e) {
        // ESC key closes mobile menu
        if (e.key === 'Escape') {
            const navMenu = document.getElementById('navMenu');
            const navToggle = document.getElementById('navToggle');
            
            if (navMenu && navMenu.classList.contains('active')) {
                navToggle.classList.remove('active');
                navMenu.classList.remove('active');
                document.body.style.overflow = '';
            }
        }
    }

    handleResize() {
        // Close mobile menu on resize to desktop
        if (window.innerWidth > 768) {
            const navMenu = document.getElementById('navMenu');
            const navToggle = document.getElementById('navToggle');
            
            if (navMenu && navMenu.classList.contains('active')) {
                navToggle.classList.remove('active');
                navMenu.classList.remove('active');
                document.body.style.overflow = '';
            }
        }
    }

    updateCopyright() {
        const yearElement = document.getElementById('currentYear');
        if (yearElement) {
            yearElement.textContent = new Date().getFullYear();
        }
    }
}

// Enhanced button interactions
class ButtonEnhancer {
    static init() {
        document.querySelectorAll('.btn').forEach(btn => {
            // Add ripple effect
            btn.addEventListener('click', (e) => {
                ButtonEnhancer.createRipple(e, btn);
            });
            
            // Add magnetic effect for larger screens
            if (window.innerWidth > 768) {
                btn.addEventListener('mousemove', (e) => {
                    ButtonEnhancer.magneticEffect(e, btn);
                });
                
                btn.addEventListener('mouseleave', () => {
                    btn.style.transform = '';
                });
            }
        });
    }

    static createRipple(e, button) {
        const ripple = document.createElement('span');
        const rect = button.getBoundingClientRect();
        const size = Math.max(rect.width, rect.height);
        const x = e.clientX - rect.left - size / 2;
        const y = e.clientY - rect.top - size / 2;
        
        ripple.style.cssText = `
            position: absolute;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.3);
            pointer-events: none;
            width: ${size}px;
            height: ${size}px;
            left: ${x}px;
            top: ${y}px;
            animation: ripple 0.6s ease-out;
        `;
        
        // Add ripple animation CSS if not exists
        if (!document.getElementById('ripple-styles')) {
            const style = document.createElement('style');
            style.id = 'ripple-styles';
            style.textContent = `
                @keyframes ripple {
                    to {
                        transform: scale(2);
                        opacity: 0;
                    }
                }
            `;
            document.head.appendChild(style);
        }
        
        button.appendChild(ripple);
        
        setTimeout(() => {
            ripple.remove();
        }, 600);
    }

    static magneticEffect(e, button) {
        const rect = button.getBoundingClientRect();
        const x = e.clientX - rect.left - rect.width / 2;
        const y = e.clientY - rect.top - rect.height / 2;
        
        const distance = Math.sqrt(x * x + y * y);
        const maxDistance = 50;
        
        if (distance < maxDistance) {
            const strength = (maxDistance - distance) / maxDistance;
            const moveX = x * strength * 0.3;
            const moveY = y * strength * 0.3;
            
            button.style.transform = `translate(${moveX}px, ${moveY}px)`;
        }
    }
}

// Performance monitoring
class PerformanceMonitor {
    static init() {
        // Monitor loading performance
        window.addEventListener('load', () => {
            const loadTime = performance.now();
            console.log(`Page loaded in ${loadTime.toFixed(2)}ms`);
            
            // Track largest contentful paint
            if ('PerformanceObserver' in window) {
                const observer = new PerformanceObserver((list) => {
                    const entries = list.getEntries();
                    const lastEntry = entries[entries.length - 1];
                    console.log(`LCP: ${lastEntry.startTime.toFixed(2)}ms`);
                });
                observer.observe({ entryTypes: ['largest-contentful-paint'] });
            }
        });
    }
}

// Accessibility enhancements
class AccessibilityEnhancer {
    static init() {
        // Add skip link functionality
        const skipLink = document.createElement('a');
        skipLink.href = '#main-content';
        skipLink.textContent = 'Skip to main content';
        skipLink.className = 'skip-link';
        skipLink.style.cssText = `
            position: absolute;
            top: -100px; /* Move it further up to ensure it's completely off-screen */
            left: 0;
            width: 1px; /* Make it invisible when off-screen */
            height: 1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0); /* Hide it visually */
            background: var(--primary-red);
            color: white;
            padding: 8px;
            text-decoration: none;
            border-radius: 4px;
            z-index: 10000;
            transition: all 0.3s;
        `;
        
        skipLink.addEventListener('focus', () => {
            skipLink.style.top = '6px';
        });
        
        skipLink.addEventListener('blur', () => {
            skipLink.style.top = '-40px';
        });
        
        skipLink.addEventListener('focus', () => {
            skipLink.style.clip = 'auto';
            skipLink.style.width = 'auto';
            skipLink.style.height = 'auto';
            skipLink.style.top = '6px';
            skipLink.style.left = '6px';
            skipLink.style.overflow = 'visible';
        });
        
        skipLink.addEventListener('blur', () => {
            skipLink.style.clip = 'rect(0, 0, 0, 0)';
            skipLink.style.width = '1px';
            skipLink.style.height = '1px';
            skipLink.style.top = '-100px';
            skipLink.style.left = '0';
            skipLink.style.overflow = 'hidden';
        });
        
        skipLink.addEventListener('focus', () => {
            skipLink.style.clip = 'auto';
            skipLink.style.width = 'auto';
            skipLink.style.height = 'auto';
            skipLink.style.top = '6px';
            skipLink.style.left = '6px';
            skipLink.style.overflow = 'visible';
        });
        
        skipLink.addEventListener('blur', () => {
            skipLink.style.clip = 'rect(0, 0, 0, 0)';
            skipLink.style.width = '1px';
            skipLink.style.height = '1px';
            skipLink.style.top = '-100px';
            skipLink.style.left = '0';
            skipLink.style.overflow = 'hidden';
        });
        
        document.body.insertBefore(skipLink, document.body.firstChild);
        
        // Improve focus indicators
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Tab') {
                document.body.classList.add('using-keyboard');
            }
        });
        
        document.addEventListener('mousedown', () => {
            document.body.classList.remove('using-keyboard');
        });
        
        // Add focus styles
        const focusStyles = document.createElement('style');
        focusStyles.textContent = `
            .using-keyboard *:focus {
                outline: 2px solid var(--primary-red) !important;
                outline-offset: 2px !important;
            }
        `;
        document.head.appendChild(focusStyles);
    }
}

// Initialize everything
document.addEventListener('DOMContentLoaded', () => {
    // Initialize main website functionality
    new SignalSpikeWebsite();
    
    // Initialize enhancements
    ButtonEnhancer.init();
    PerformanceMonitor.init();
    AccessibilityEnhancer.init();
});

// Error handling
window.addEventListener('error', (e) => {
    console.error('JavaScript error:', e.error);
});

// Service worker registration (for future PWA features)
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        // Uncomment when you have a service worker
        // navigator.serviceWorker.register('/sw.js');
    });
} 